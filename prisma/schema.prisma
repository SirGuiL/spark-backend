// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cars {
  id           String         @id @default(uuid())
  model        String
  plate        String         @unique
  userId       String
  brandId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  services     Services[]
  user         Users          @relation(fields: [userId], references: [id])
  brand        Brand          @relation(fields: [brandId], references: [id])
  CarsServices CarsServices[]
}

model Services {
  id           String         @id @default(uuid())
  name         String
  amount       Float
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cars         Cars[]
  tags         Tags[]
  user         Users          @relation(fields: [userId], references: [id])
  CarsServices CarsServices[]
  ServicesTags ServicesTags[]
}

model CarsServices {
  id            String    @id @default(uuid())
  carId         String
  serviceId     String
  userId        String
  createdAt     DateTime  @default(now())
  isFinished    Boolean   @default(false)
  finishedAt    DateTime?
  paymentMethod String?

  car      Cars     @relation(fields: [carId], references: [id])
  user     Users    @relation(fields: [userId], references: [id])
  services Services @relation(fields: [serviceId], references: [id])
}

model Brand {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  type      Type     @default(cars)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cars      Cars[]
}

model Tags {
  id           String         @id @default(uuid())
  name         String         @unique
  userId       String
  createdAt    DateTime       @default(now())
  services     Services[]
  user         Users          @relation(fields: [userId], references: [id])
  ServicesTags ServicesTags[]
}

model ServicesTags {
  id        String   @id @default(uuid())
  tagId     String
  serviceId String
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  tag       Tags     @relation(fields: [tagId], references: [id])
  service   Services @relation(fields: [serviceId], references: [id])
}

model Users {
  id           String         @id @default(uuid())
  name         String?
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isActive     Boolean        @default(true)
  accountId    String
  role         Role           @default(USER)
  Cars         Cars[]
  Services     Services[]
  Tags         Tags[]
  account      Accounts       @relation(fields: [accountId], references: [id])
  CarsServices CarsServices[]
  ServicesTags ServicesTags[]
}

model Accounts {
  id        String   @id @default(uuid())
  name      String?
  cnpj      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  Users     Users[]
}

enum Role {
  USER
  ADMIN
}

enum Type {
  cars
  motorcycles
  trucks
}
